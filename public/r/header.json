{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header",
  "type": "registry:component",
  "title": "Breitling Header",
  "description": "Breitling Header with navigation and dropdown menus",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-dropdown-menu"
  ],
  "registryDependencies": [
    "theme"
  ],
  "files": [
    {
      "path": "components/header.tsx",
      "content": "\"use client\"\n\nimport Link from \"next/link\"\nimport Image from \"next/image\"\nimport { useState, useEffect } from \"react\"\nimport { Phone, Globe, Search, Heart, User, ShoppingBag } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\n\ninterface HeaderProps {\n  /**\n   * Optional announcement message to display at the top of the header\n   */\n  announcement?: string\n  /**\n   * Optional link for the announcement message\n   */\n  announcementLink?: string\n  /**\n   * Optional text for the announcement link\n   */\n  announcementLinkText?: string\n  /**\n   * Optional phone number to display in the header\n   */\n  phoneNumber?: string\n  /**\n   * Optional country code to display in the header\n   */\n  countryCode?: string\n  /**\n   * Optional language to display in the header\n   */\n  language?: string\n  /**\n   * Optional array of languages to display in the dropdown\n   */\n  languages?: string[]\n  /**\n   * Optional array of navigation items\n   */\n  navItems?: Array<{ name: string; href: string }>\n}\n\nexport default function Header({\n  announcement = \"Spoil your dad with a memorable gift for Father's Day. Order online by May 29, 12pm.\",\n  announcementLink = \"#\",\n  announcementLinkText = \"T&Cs apply.\",\n  phoneNumber = \"+41 31 547 91 83\",\n  countryCode = \"CH\",\n  language = \"ENGLISH\",\n  languages = [\"DEUTSCH\", \"FRANÃ‡AIS\", \"ITALIANO\"],\n  navItems = [\n    { name: \"COLLECTIONS\", href: \"/collections\" },\n    { name: \"WATCHES\", href: \"/watches\" },\n    { name: \"STRAPS\", href: \"/straps\" },\n    { name: \"SERVICES\", href: \"/services\" },\n    { name: \"STORES\", href: \"/stores\" },\n    { name: \"ABOUT\", href: \"/about\" },\n  ],\n}: HeaderProps) {\n  const [showAnnouncement, setShowAnnouncement] = useState(true)\n  const [scrolled, setScrolled] = useState(false)\n  const [activeNavItem, setActiveNavItem] = useState<string | null>(null)\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const isScrolled = window.scrollY > 0\n      if (isScrolled !== scrolled) {\n        setScrolled(isScrolled)\n      }\n    }\n\n    window.addEventListener(\"scroll\", handleScroll, { passive: true })\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  }, [scrolled])\n\n  return (\n    <header className=\"w-full\">\n      {showAnnouncement && (\n        <div className=\"bg-[#0a2240] text-white py-4 px-6 flex items-center justify-between\">\n          <button className=\"text-white\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"lucide lucide-chevron-left\"\n            >\n              <path d=\"m15 18-6-6 6-6\" />\n            </svg>\n          </button>\n          <p className=\"text-sm text-center\">\n            {announcement}{\" \"}\n            <Link href={announcementLink} className=\"underline\">\n              {announcementLinkText}\n            </Link>\n          </p>\n          <button onClick={() => setShowAnnouncement(false)} className=\"text-white\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"lucide lucide-x\"\n            >\n              <path d=\"M18 6 6 18\" />\n              <path d=\"m6 6 12 12\" />\n            </svg>\n          </button>\n        </div>\n      )}\n      <div className={`sticky top-0 z-50 transition-shadow duration-300 ${scrolled ? \"shadow-md\" : \"\"}`}>\n        <div className=\"bg-breitling-yellow py-6 px-6\">\n          <div className=\"container mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"flex items-center\">\n                <Globe className=\"h-5 w-5 mr-2\" strokeWidth={1} />\n                <span className=\"font-normal mr-2 text-base\">{countryCode}</span>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"p-0 h-auto font-normal text-base flex items-center\">\n                      {language}\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"lucide lucide-chevron-down h-4 w-4 ml-1\"\n                      >\n                        <path d=\"m6 9 6 6 6-6\" />\n                      </svg>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\">\n                    {languages.map((lang) => (\n                      <DropdownMenuItem key={lang}>{lang}</DropdownMenuItem>\n                    ))}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n              <div className=\"flex items-center\">\n                <Phone className=\"h-5 w-5 mr-2\" strokeWidth={1} />\n                <span className=\"text-base\">{phoneNumber}</span>\n              </div>\n            </div>\n            <Link href=\"/\" className=\"absolute left-1/2 transform -translate-x-1/2\">\n              <Image\n                src=\"https://www.breitling.com/_next/static/images/breitling-140.svg\"\n                alt=\"Breitling\"\n                width={120}\n                height={40}\n                className=\"h-10\"\n              />\n            </Link>\n            <div className=\"flex items-center space-x-6\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full p-2 h-auto w-auto\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"22\"\n                  height=\"22\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"lucide lucide-circle-dollar-sign\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                  <path d=\"M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8\" />\n                  <path d=\"M12 18V6\" />\n                </svg>\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full p-2 h-auto w-auto\">\n                <Search className=\"h-6 w-6\" strokeWidth={1.5} />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full p-2 h-auto w-auto\">\n                <Heart className=\"h-6 w-6\" strokeWidth={1.5} />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full p-2 h-auto w-auto\">\n                <User className=\"h-6 w-6\" strokeWidth={1.5} />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full p-2 h-auto w-auto\">\n                <ShoppingBag className=\"h-6 w-6\" strokeWidth={1.5} />\n              </Button>\n            </div>\n          </div>\n        </div>\n        <nav className=\"bg-breitling-yellow border-t border-[#e6b82e]\">\n          <div className=\"container mx-auto flex justify-center\">\n            <ul className=\"flex\">\n              {navItems.map((item) => (\n                <li key={item.name} className=\"relative\">\n                  <Link\n                    href={item.href}\n                    className=\"font-normal text-lg py-3 px-6 block tracking-wide relative\"\n                    onMouseEnter={() => setActiveNavItem(item.name)}\n                    onMouseLeave={() => setActiveNavItem(null)}\n                  >\n                    {item.name}\n                    {activeNavItem === item.name && (\n                      <span className=\"absolute bottom-0 left-0 w-full h-1 bg-black\"></span>\n                    )}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </nav>\n      </div>\n    </header>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}